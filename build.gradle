
import org.opensearch.gradle.info.BuildParams
import java.util.concurrent.Callable


buildscript {
    ext {
        opensearch_version = System.getProperty("opensearch.version", "1.3.0-SNAPSHOT")
        knn_bwc_version = System.getProperty("bwc.version", "1.3.0.0-SNAPSHOT")
        opensearch_bwc_version = "${knn_bwc_version}" - ".0-SNAPSHOT"
    }

    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
    }

    dependencies {
        classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
    }
}

plugins {
    id 'nebula.ospackage' version "8.3.0"
    id 'java-library'
    id "io.freefair.lombok" version "5.0.0-rc4"
    id 'jacoco'
    id "com.diffplug.spotless" version "6.3.0" apply false
}

apply from: 'gradle/formatting.gradle'
//apply plugin: 'opensearch.opensearchplugin'
//apply plugin: 'opensearch.rest-test'
apply plugin: 'application'

group 'org.example'
version '1.3.0-SNAPSHOT'


repositories {
    mavenLocal()
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral() // For Elastic Libs that you can use to get started coding until open OpenSearch libs are available

}

ext {
    isSnapshot = "true" == System.getProperty("build.snapshot", "true")
}

allprojects {
    version = opensearch_version - "-SNAPSHOT" + ".0"
    if (isSnapshot) {
        version += "-SNAPSHOT"
    }

    plugins.withId('java') {
        sourceCompatibility = targetCompatibility = "1.8"
    }
}

ext {
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
}


mainClassName = 'org.opensearch.knn.plugin.RunPlugin'



subprojects {
    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
}

dependencies {
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.1'
    api "org.opensearch:opensearch:${opensearch_version}"
    api "org.opensearch.plugin:opensearch-scripting-painless-spi:1.3.0-SNAPSHOT"
    api group: 'com.google.guava', name: 'failureaccess', version:'1.0.1'
    api group: 'com.google.guava', name: 'guava', version:'30.0-jre'
    api group: 'commons-lang', name: 'commons-lang', version: '2.6'
    api "io.netty:netty-all:4.1.73.Final"
    testImplementation "org.opensearch.test:framework:${opensearch_version}"
    api group: 'io.netty', name: 'netty-all', version: '4.1.73.Final'
    api "io.netty:netty-buffer:4.1.73.Final"
    api "io.netty:netty-codec:4.1.73.Final"
    api "io.netty:netty-codec-http:4.1.73.Final"
    api "io.netty:netty-common:4.1.73.Final"
    api "io.netty:netty-handler:4.1.73.Final"
    api "io.netty:netty-resolver:4.1.73.Final"
    api "io.netty:netty-transport:4.1.73.Final"
    api "com.amazonaws:aws-java-sdk-s3:1.11.749"
    api "com.amazonaws:aws-java-sdk-core:1.11.749"
    api "com.amazonaws:jmespath-java:1.11.749"
    api "org.apache.httpcomponents:httpclient:4.5.13"
    api "org.apache.httpcomponents:httpcore:4.4.12"
    api "commons-logging:commons-logging:1.1.3"
    api "org.apache.logging.log4j:log4j-1.2-api:2.17.1"
    api "commons-codec:commons-codec:1.13"
    api "com.fasterxml.jackson.core:jackson-core: 2.12.6"
    api "com.fasterxml.jackson.core:jackson-databind: 2.12.6"
    api "com.fasterxml.jackson.core:jackson-annotations: 2.12.6"
    api "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor: 2.12.6"
    api "joda-time:joda-time:2.10.12"
    compile group: 'com.google.guava', name: 'failureaccess', version:'1.0.1'
    compile group: 'com.google.guava', name: 'guava', version:'30.0-jre'

    // HACK: javax.xml.bind was removed from default modules in java 9, so we pull the api in here,
    // and whitelist this hack in JarHell
    api 'javax.xml.bind:jaxb-api:2.2.2'

}


compileJava.options.warnings = false
compileJava {
    options.compilerArgs.addAll(["-processor", 'lombok.launch.AnnotationProcessorHider$AnnotationProcessor'])
    doFirst {
        // TODO: do not fail build on warnings, need to fix all compiler warnings
        options.compilerArgs.remove('-Werror')
        // TODO: need to fix all java doc format
        options.compilerArgs.remove('-Xdoclint:all')
    }
}
// TODO: Similarly, need to fix compiling errors in test source code
compileTestJava.options.warnings = false
compileTestJava {
    options.compilerArgs.addAll(["-processor", 'lombok.launch.AnnotationProcessorHider$AnnotationProcessor'])
    doFirst {
        options.compilerArgs.remove('-Werror')
        options.compilerArgs.remove('-Xdoclint:all')
    }
}
